.media-newsitem {
  padding-top: .7em;
  padding-bottom: .7em;
  /* 其他辅助 信息样式 */
  /* 其他辅助 end */
  /* 分享部分 */ }
  .media-newsitem:hover .media-explain, .media-newsitem:hover .media-text {
    color: inherit; }
  .media-newsitem .media-explain, .media-newsitem .media-text {
    color: #555; }
  .media-newsitem .media-text {
    margin-bottom: .5em; }
  .media-newsitem .media-title {
    line-height: 1.2;
    margin-bottom: 1em;
    font-size: 1.2em;
    font-weight: bold;
    font-family: "Microsoft YaHei", "微软雅黑", tahoma, arial, simsun, "宋体"; }
  .media-newsitem .media-state, .media-newsitem .media-time {
    font-size: 0.85714em; }
  .media-newsitem .media-state {
    color: #818a91; }
    .media-newsitem .media-state em {
      color: #fb7834; }
  .media-newsitem .media-other {
    position: absolute;
    left: 0;
    bottom: 0;
    line-height: 2.2;
    color: #55595c; }
    .media-newsitem .media-other i {
      padding-right: .3rem; }
    .media-newsitem .media-other .time, .media-newsitem .media-other .share, .media-newsitem .media-other .comment {
      margin-left: 1.1em; }
    .media-newsitem .media-other .comment-glyph i {
      color: #5fbcf8; }
    .media-newsitem .media-other .share-glyph i {
      color: #5fbcf8; }
    .media-newsitem .media-other.low-right {
      left: auto;
      right: 0; }
  .media-newsitem .share {
    /* 下拉信息及箭头样式 begin */
    /* 下拉信息及箭头样式 end */ }
    .media-newsitem .share .dropdown-menu > li > a {
      padding: .2em 1em; }
    .media-newsitem .share .dropdown-menu {
      position: relative;
      float: none;
      min-width: 0;
      margin-top: 0; }
    .media-newsitem .share .dropdown-menu-wrap {
      position: absolute;
      left: 50%;
      width: 6em;
      margin-left: -3em;
      padding-top: 8px; }
      .media-newsitem .share .dropdown-menu-wrap:before, .media-newsitem .share .dropdown-menu-wrap:after {
        content: "";
        position: absolute;
        left: 50%;
        z-index: 1001;
        margin-left: -8px;
        visibility: hidden; }
      .media-newsitem .share .dropdown-menu-wrap:before {
        top: 0;
        display: inline-block;
        width: 0;
        height: 0;
        vertical-align: middle;
        border-bottom: 8px solid #C0BCBC;
        border-right: 8px solid transparent;
        border-left: 8px solid transparent;
        border-top: 0 dotted;
        -webkit-transform: rotate(360deg);
        -ms-transform: rotate(360deg);
        -o-transform: rotate(360deg);
        transform: rotate(360deg); }
      .media-newsitem .share .dropdown-menu-wrap:after {
        top: 1px;
        display: inline-block;
        width: 0;
        height: 0;
        vertical-align: middle;
        border-bottom: 8px solid #fff;
        border-right: 8px solid transparent;
        border-left: 8px solid transparent;
        border-top: 0 dotted;
        -webkit-transform: rotate(360deg);
        -ms-transform: rotate(360deg);
        -o-transform: rotate(360deg);
        transform: rotate(360deg); }
    .media-newsitem .share:hover .dropdown-menu-wrap:before, .media-newsitem .share:hover .dropdown-menu-wrap:after {
      visibility: visible; }
    .media-newsitem .share:hover .dropdown-menu {
      display: block; }



/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=../../../map/blocks/media/media-newsitem/media-newsitem.css.map */
